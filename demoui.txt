// src/main.ts
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { provideRouter } from '@angular/router';
import { provideAnimationsAsync } from '@angular/platform-browser/animations/async';
import { routes } from './app/app.routes';

bootstrapApplication(AppComponent, {
  providers: [
    provideRouter(routes),
    provideAnimationsAsync()
  ]
}).catch(err => console.error(err));

// src/app/app.routes.ts
import { Routes } from '@angular/router';
import { LoginComponent } from './components/login/login.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { DealsComponent } from './components/deals/deals.component';
import { AuthGuard } from './guards/auth.guard';

export const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { 
    path: 'dashboard', 
    component: DashboardComponent, 
    canActivate: [AuthGuard],
    children: [
      { path: 'deals', component: DealsComponent },
      { path: '', redirectTo: 'deals', pathMatch: 'full' }
    ]
  },
  { path: '', redirectTo: '/login', pathMatch: 'full' },
  { path: '**', redirectTo: '/login' }
];

// src/app/app.component.ts
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet],
  template: `<router-outlet />`,
  styles: [`
    :host {
      display: block;
      height: 100vh;
    }
  `]
})
export class AppComponent {
  title = 'loan-management-app';
}

// src/app/services/auth.service.ts
import { Injectable, signal, computed } from '@angular/core';
import { Observable, of, delay, map } from 'rxjs';

export interface LoginResponse {
  success: boolean;
  token?: string;
  user?: any;
  error?: string;
}

export interface User {
  firstName: string;
  lastName: string;
  role: string;
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private readonly TOKEN_KEY = 'loan_app_token';
  
  // Signals for reactive state management
  private _currentUser = signal<User | null>(null);
  private _isAuthenticated = signal<boolean>(false);
  
  // Public computed signals
  readonly currentUser = this._currentUser.asReadonly();
  readonly isAuthenticated = this._isAuthenticated.asReadonly();
  readonly userDisplayName = computed(() => {
    const user = this._currentUser();
    return user ? `${user.firstName} ${user.lastName}` : '';
  });

  constructor() {
    this.initializeAuthState();
  }

  private initializeAuthState(): void {
    const token = localStorage.getItem(this.TOKEN_KEY);
    if (token && this.isTokenValid(token)) {
      const payload = this.decodeToken(token);
      this._currentUser.set({
        firstName: 'Alistair',
        lastName: 'Guthrie',
        role: payload.role
      });
      this._isAuthenticated.set(true);
    }
  }

  login(username: string, password: string): Observable<LoginResponse> {
    return of(null).pipe(
      delay(1500),
      map(() => {
        if (username === 'admin' && password === 'password') {
          const mockToken = this.generateMockJWT({
            sub: 'admin',
            name: 'Alistair Guthrie',
            role: 'administrator',
            exp: Date.now() + (24 * 60 * 60 * 1000)
          });
          
          localStorage.setItem(this.TOKEN_KEY, mockToken);
          
          const user: User = {
            firstName: 'Alistair',
            lastName: 'Guthrie',
            role: 'administrator'
          };
          
          this._currentUser.set(user);
          this._isAuthenticated.set(true);
          
          return {
            success: true,
            token: mockToken,
            user
          };
        } else {
          return {
            success: false,
            error: 'Invalid username or password'
          };
        }
      })
    );
  }

  logout(): void {
    localStorage.removeItem(this.TOKEN_KEY);
    this._currentUser.set(null);
    this._isAuthenticated.set(false);
  }

  private isTokenValid(token: string): boolean {
    try {
      const payload = this.decodeToken(token);
      return payload.exp > Date.now();
    } catch {
      return false;
    }
  }

  private generateMockJWT(payload: any): string {
    const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));
    const encodedPayload = btoa(JSON.stringify(payload));
    const signature = 'mock-signature';
    return `${header}.${encodedPayload}.${signature}`;
  }

  private decodeToken(token: string): any {
    const parts = token.split('.');
    if (parts.length !== 3) throw new Error('Invalid token');
    return JSON.parse(atob(parts[1]));
  }
}

// src/app/services/deal.service.ts
import { Injectable, signal, computed } from '@angular/core';
import { Observable, of, delay, map } from 'rxjs';

export interface Deal {
  id?: string;
  name: string;
  logo?: string;
  facilityLimit: number;
  agent: string;
  shortNames: string;
  facility: string;
  industry: string;
  type: string;
  status: string;
  companyDescription: string;
  contacts: Contact[];
  createdDate?: Date;
}

export interface Contact {
  name: string;
  role: string;
}

@Injectable({
  providedIn: 'root'
})
export class DealService {
  private readonly DEALS_KEY = 'loan_app_deals';
  
  // Signal for reactive state management
  private _deals = signal<Deal[]>([]);
  
  // Public computed signals
  readonly deals = this._deals.asReadonly();
  readonly dealCount = computed(() => this._deals().length);
  readonly dealsByStatus = computed(() => {
    const deals = this._deals();
    return deals.reduce((acc, deal) => {
      acc[deal.status] = (acc[deal.status] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
  });

  constructor() {
    this.loadDeals();
  }

  private loadDeals(): void {
    const deals = this.getDealsFromStorage();
    this._deals.set(deals);
  }

  getDeals(): Observable<Deal[]> {
    return of(this._deals());
  }

  addDeal(deal: Deal): Observable<Deal> {
    return of(deal).pipe(
      delay(2000),
      map((deal: Deal) => {
        const newDeal = {
          ...deal,
          id: this.generateId(),
          createdDate: new Date()
        };
        
        const currentDeals = this._deals();
        const updatedDeals = [...currentDeals, newDeal];
        
        this._deals.set(updatedDeals);
        this.saveDealsToStorage(updatedDeals);
        
        return newDeal;
      })
    );
  }

  updateDeal(dealId: string, updates: Partial<Deal>): void {
    const currentDeals = this._deals();
    const updatedDeals = currentDeals.map(deal => 
      deal.id === dealId ? { ...deal, ...updates } : deal
    );
    this._deals.set(updatedDeals);
    this.saveDealsToStorage(updatedDeals);
  }

  deleteDeal(dealId: string): void {
    const currentDeals = this._deals();
    const updatedDeals = currentDeals.filter(deal => deal.id !== dealId);
    this._deals.set(updatedDeals);
    this.saveDealsToStorage(updatedDeals);
  }

  getDealById(id: string): Deal | undefined {
    return this._deals().find(deal => deal.id === id);
  }

  private getDealsFromStorage(): Deal[] {
    const deals = localStorage.getItem(this.DEALS_KEY);
    return deals ? JSON.parse(deals) : this.getMockDeals();
  }

  private saveDealsToStorage(deals: Deal[]): void {
    localStorage.setItem(this.DEALS_KEY, JSON.stringify(deals));
  }

  private generateId(): string {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }

  private getMockDeals(): Deal[] {
    return [
      {
        id: '1',
        name: 'ARM Energy',
        facilityLimit: 250000000,
        agent: 'Bank of America',
        shortNames: 'ARM-001',
        facility: 'Revolver',
        industry: 'Energy',
        type: 'Syndication',
        status: 'Lender',
        companyDescription: 'Renewable energy development company',
        contacts: [
          { name: 'John Smith', role: 'CFO' },
          { name: 'Jane Doe', role: 'Treasurer' }
        ],
        createdDate: new Date('2024-01-15')
      },
      {
        id: '2',
        name: 'Marco',
        facilityLimit: 150000000,
        agent: 'JPMorgan Chase',
        shortNames: 'MAR-002',
        facility: 'Transactional',
        industry: 'Metals',
        type: 'Bilateral',
        status: 'Agent',
        companyDescription: 'Metal trading and commodity services',
        contacts: [
          { name: 'Michael Johnson', role: 'CEO' }
        ],
        createdDate: new Date('2024-02-20')
      }
    ];
  }
}

// src/app/guards/auth.guard.ts
import { inject } from '@angular/core';
import { CanActivateFn, Router } from '@angular/router';
import { AuthService } from '../services/auth.service';

export const AuthGuard: CanActivateFn = () => {
  const authService = inject(AuthService);
  const router = inject(Router);

  if (authService.isAuthenticated()) {
    return true;
  } else {
    router.navigate(['/login']);
    return false;
  }
};

// src/app/components/login/login.component.ts
import { Component, signal } from '@angular/core';
import { Router } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-login',
  imports: [FormsModule],
  template: `
    <div class="login-container">
      <div class="login-card">
        <div class="login-header">
          <gel-logo 
            appearance="co-brand"
            data-theme="light"
            size="lg"
            label="AG"
            labelSecondary="Platform">
          </gel-logo>
        </div>
        
        <div class="login-content">
          <gel-form name="login-form" action="#" (ngSubmit)="onLogin()" #loginForm="ngForm">
            <gel-form-item layout="vertical" label="Username">
              <gel-text-input
                name="username"
                [(ngModel)]="username"
                required="true"
                [disabled]="isLoading()"
                size="lg"
                placeholder="Enter username">
              </gel-text-input>
            </gel-form-item>
            
            <gel-form-item layout="vertical" label="Password">
              <gel-text-input
                name="password"
                inputType="password"
                [(ngModel)]="password"
                required="true"
                [disabled]="isLoading()"
                size="lg"
                placeholder="Enter password">
              </gel-text-input>
            </gel-form-item>
            
            @if (errorMessage()) {
              <div class="error-message">
                {{ errorMessage() }}
              </div>
            }
            
            <gel-button 
              hierarchy="primary"
              size="lg"
              [expand]="true"
              [disabled]="!loginForm.valid || isLoading()"
              type="submit">
              @if (!isLoading()) {
                Login
              } @else {
                Authenticating...
              }
            </gel-button>
          </gel-form>
          
          <div class="demo-credentials">
            <gel-text size="s" appearance="disabled">
              Demo credentials: admin / password
            </gel-text>
          </div>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .login-container {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      background: var(--mq-color-background-header-static);
      padding: var(--mq-space-xl);
    }
    
    .login-card {
      width: 100%;
      max-width: 400px;
      background: var(--mq-color-primary-white);
      border-radius: var(--mq-border-radius-m);
      box-shadow: var(--mq-shadow-l3-0);
      overflow: hidden;
    }
    
    .login-header {
      text-align: center;
      padding: var(--mq-space-2xl) var(--mq-space-xl) var(--mq-space-l);
      background: var(--mq-color-primary-white);
    }
    
    .login-content {
      padding: var(--mq-space-xl);
    }
    
    gel-form {
      display: flex;
      flex-direction: column;
      gap: var(--mq-space-l);
    }
    
    .error-message {
      color: var(--mq-color-text-negative);
      font-size: 14px;
      text-align: center;
      padding: var(--mq-space-s);
      background: var(--mq-color-tomato-100);
      border-radius: var(--mq-border-radius-s);
      border: 1px solid var(--mq-color-tomato-200);
    }
    
    .demo-credentials {
      text-align: center;
      margin-top: var(--mq-space-l);
    }
  `]
})
export class LoginComponent {
  private authService = inject(AuthService);
  private router = inject(Router);

  // Signals for reactive UI state
  readonly isLoading = signal(false);
  readonly errorMessage = signal('');

  // Form fields (no need for signals here)
  username = '';
  password = '';

  async onLogin(): Promise<void> {
    this.isLoading.set(true);
    this.errorMessage.set('');
    
    this.authService.login(this.username, this.password).subscribe({
      next: (response) => {
        this.isLoading.set(false);
        if (response.success) {
          this.router.navigate(['/dashboard']);
        } else {
          this.errorMessage.set(response.error || 'Login failed');
        }
      },
      error: () => {
        this.isLoading.set(false);
        this.errorMessage.set('An error occurred during login');
      }
    });
  }
}

// src/app/components/global-header/global-header.component.ts
import { Component, inject } from '@angular/core';
import { Router } from '@angular/router';
import { MatMenuModule } from '@angular/material/menu';
import { MatIconModule } from '@angular/material/icon';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-global-header',
  imports: [MatMenuModule, MatIconModule],
  template: `
    <header class="global-header">
      <div class="header-left">
        <gel-logo 
          appearance="co-brand"
          data-theme="dark"
          size="sm"
          region="en"
          label="AG"
          labelSecondary="Platform"
          alignment="horizontal">
        </gel-logo>
      </div>
      
      <div class="header-right">
        <gel-button
          hierarchy="secondary"
          appearance="inverse"
          size="md"
          iconRight="keyboard_arrow_down"
          [matMenuTriggerFor]="userMenu"
          class="user-button">
          {{ authService.userDisplayName() }}
        </gel-button>
        
        <mat-menu #userMenu="matMenu" class="user-menu">
          <gel-button
            hierarchy="tertiary"
            size="sm"
            iconLeft="logout"
            (click)="logout()"
            class="menu-item">
            Logout
          </gel-button>
        </mat-menu>
      </div>
    </header>
  `,
  styles: [`
    .global-header {
      background-color: var(--mq-color-background-header-static);
      color: var(--mq-color-text-primary-inverse-static);
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: var(--mq-space-m) var(--mq-space-2xl);
      position: sticky;
      top: 0;
      z-index: 100;
      box-shadow: var(--mq-shadow-l1-0);
    }
    
    .header-left {
      display: flex;
      align-items: center;
    }
    
    .header-right {
      display: flex;
      align-items: center;
      gap: var(--mq-space-s);
    }
    
    .user-button {
      color: var(--mq-color-text-primary-inverse-static);
      border-color: transparent;
    }
    
    .user-button:hover {
      background-color: var(--mq-color-interactive-background-tertiary-hover);
    }
    
    ::ng-deep .user-menu {
      margin-top: var(--mq-space-s);
    }
    
    ::ng-deep .user-menu .mat-mdc-menu-content {
      padding: var(--mq-space-xs);
    }
    
    .menu-item {
      width: 100%;
      justify-content: flex-start;
      margin-bottom: var(--mq-space-2xs);
    }
    
    .menu-item:last-child {
      margin-bottom: 0;
    }
  `]
})
export class GlobalHeaderComponent {
  readonly authService = inject(AuthService);
  private router = inject(Router);

  logout(): void {
    this.authService.logout();
    this.router.navigate(['/login']);
  }
}

// src/app/components/side-nav/side-nav.component.ts
import { Component, signal, inject } from '@angular/core';
import { Router } from '@angular/router';

interface NavItem {
  name: string;
  icon: string;
  enabled: boolean;
  route?: string;
}

@Component({
  selector: 'app-side-nav',
  template: `
    <nav class="side-nav">
      <ul>
        @for (item of navItems; track item.name) {
          <li 
            [class.enabled]="item.enabled"
            [class.disabled]="!item.enabled"
            [class.selected]="selectedItem() === item"
            [class.hovered]="hoveredItem() === item && item.enabled"
            (mouseenter)="onNavItemMouseEnter(item)"
            (mouseleave)="onNavItemMouseLeave()"
            (click)="onNavItemClick(item)">
            
            @if (item.enabled) {
              <div class="nav-item-content">
                <gel-icon 
                  data-theme="dark" 
                  [name]="item.icon" 
                  size="md">
                </gel-icon>
                <gel-text 
                  data-theme="dark" 
                  size="s" 
                  removeMargins="true">
                  {{ item.name }}
                </gel-text>
              </div>
            } @else {
              <div class="nav-item-content">
                <gel-icon 
                  data-theme="dark" 
                  [name]="item.icon" 
                  size="md"
                  appearance="disabled">
                </gel-icon>
                <gel-text 
                  data-theme="dark" 
                  size="s" 
                  removeMargins="true"
                  appearance="disabled">
                  {{ item.name }}
                </gel-text>
              </div>
            }
          </li>
        }
      </ul>
      
      <div class="site-status-container">
        <div class="version-wrapper">
          <gel-text size="s" appearance="disabled">v1.1.0</gel-text>
        </div>
      </div>
    </nav>
  `,
  styles: [`
    .side-nav {
      display: flex;
      flex-direction: column;
      position: sticky;
      top: 64px;
      width: 88px;
      height: calc(100vh - 64px);
      background: var(--mq-color-background-header-static);
      overflow: visible;
      text-align: center;
      color: var(--mq-color-text-primary-inverse-static);
      z-index: 100;
    }
    
    .site-status-container {
      margin-top: auto;
      display: flex;
      flex-direction: column;
      gap: var(--mq-space-xs);
      justify-content: center;
      padding-bottom: var(--mq-space-l);
    }
    
    ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    
    li {
      cursor: pointer;
      padding: 11.5px var(--mq-space-s);
      margin: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      transition: background-color 0.2s ease;
    }
    
    .nav-item-content {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: var(--mq-space-xs);
    }
    
    li.selected {
      background-color: var(--mq-color-brand-600);
      color: var(--mq-color-text-primary-inverse-static);
    }
    
    li.hovered {
      background-color: var(--mq-color-interactive-background-tertiary-hover);
    }
    
    li.disabled {
      cursor: default;
      opacity: 0.5;
    }
    
    .version-wrapper {
      display: flex;
      justify-content: center;
    }
  `]
})
export class SideNavComponent {
  private router = inject(Router);

  // Signals for reactive navigation state
  readonly selectedItem = signal<NavItem | null>(null);
  readonly hoveredItem = signal<NavItem | null>(null);

  readonly navItems: NavItem[] = [
    { name: 'Activities', icon: 'assignment', enabled: false },
    { name: 'Deals', icon: 'account_balance', enabled: true, route: '/dashboard/deals' },
    { name: 'Covenants', icon: 'gavel', enabled: false },
    { name: 'Deal Booking', icon: 'book', enabled: false },
    { name: 'Documents', icon: 'description', enabled: false }
  ];

  constructor() {
    // Set default selected item
    this.selectedItem.set(this.navItems[1]); // Deals
  }

  onNavItemMouseEnter(item: NavItem): void {
    if (item.enabled) {
      this.hoveredItem.set(item);
    }
  }

  onNavItemMouseLeave(): void {
    this.hoveredItem.set(null);
  }

  onNavItemClick(item: NavItem): void {
    if (item.enabled) {
      this.selectedItem.set(item);
      if (item.route) {
        this.router.navigate([item.route]);
      }
    }
  }
}

// src/app/components/dashboard/dashboard.component.ts
import { Component, signal, inject } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { GlobalHeaderComponent } from '../global-header/global-header.component';
import { SideNavComponent } from '../side-nav/side-nav.component';
import { AddDealDrawerComponent } from '../add-deal-drawer/add-deal-drawer.component';
import { Deal, DealService } from '../../services/deal.service';

@Component({
  selector: 'app-dashboard',
  imports: [
    RouterOutlet,
    GlobalHeaderComponent,
    SideNavComponent,
    AddDealDrawerComponent
  ],
  template: `
    <div class="dashboard-container">
      <app-global-header></app-global-header>
      
      <div class="main-content">
        <app-side-nav></app-side-nav>
        
        <div class="content-area">
          <!-- Welcome Screen -->
          <div class="welcome-section">
            <h1>Welcome Screen (after you login) UI</h1>
            
            <div class="action-buttons">
              <gel-text-input
                placeholder="Search"
                size="md"
                class="search-field">
              </gel-text-input>
              
              <gel-button 
                hierarchy="primary" 
                (click)="openAddDeal()">
                Add
              </gel-button>
              
              <gel-button 
                hierarchy="secondary">
                Remove
              </gel-button>
              
              <gel-button 
                hierarchy="primary"
                appearance="success">
                Approver Workflow
              </gel-button>
            </div>
            
            <!-- Deals Table -->
            <div class="deals-section">
              <h2>Deals</h2>
              <gel-text size="s" class="deals-note">
                Deals are clickable, and go to Deal Home Page UI
              </gel-text>
              
              <gel-table size="md">
                <gel-table-row slot="header">
                  <gel-table-header heading="Deals"></gel-table-header>
                  <gel-table-header heading="Facility"></gel-table-header>
                  <gel-table-header heading="Industry"></gel-table-header>
                  <gel-table-header heading="Type"></gel-table-header>
                  <gel-table-header heading="Status"></gel-table-header>
                </gel-table-row>
                
                @for (deal of dealService.deals(); track deal.id) {
                  <gel-table-row 
                    slot="body" 
                    (click)="onDealClick(deal)"
                    class="deal-row">
                    <gel-table-cell>
                      <div class="deal-cell">
                        <gel-text size="m" class="deal-name">{{ deal.name }}</gel-text>
                        <gel-text size="xs" class="deal-subtitle">{{ deal.shortNames }}</gel-text>
                      </div>
                    </gel-table-cell>
                    <gel-table-cell>
                      <gel-text size="m">{{ deal.facility }}</gel-text>
                    </gel-table-cell>
                    <gel-table-cell>
                      <gel-text size="m">{{ deal.industry }}</gel-text>
                    </gel-table-cell>
                    <gel-table-cell>
                      <gel-text size="m">{{ deal.type }}</gel-text>
                    </gel-table-cell>
                    <gel-table-cell>
                      <gel-badge [label]="deal.status"></gel-badge>
                    </gel-table-cell>
                  </gel-table-row>
                }
              </gel-table>
            </div>
          </div>
          
          <!-- Child Route Content -->
          <router-outlet />
        </div>
      </div>
      
      <!-- Add Deal Drawer -->
      <app-add-deal-drawer 
        [isOpen]="isAddDealOpen()"
        (openChange)="onAddDealOpenChange($event)"
        (dealAdded)="onDealAdded($event)">
      </app-add-deal-drawer>
    </div>
  `,
  styles: [`
    .dashboard-container {
      display: grid;
      grid-template-rows: auto 1fr;
      height: 100vh;
      background-color: var(--mq-color-grey-50);
    }
    
    .main-content {
      display: grid;
      grid-template-columns: auto 1fr;
      height: 100%;
      overflow: hidden;
    }
    
    .content-area {
      padding: var(--mq-space-xl);
      overflow-y: auto;
      background: var(--mq-color-grey-50);
    }
    
    .welcome-section {
      background: var(--mq-color-primary-white);
      border-radius: var(--mq-border-radius-m);
      padding: var(--mq-space-xl);
      margin-bottom: var(--mq-space-xl);
      box-shadow: var(--mq-shadow-l1-0);
    }
    
    h1 {
      font-size: 24px;
      font-weight: 400;
      margin-bottom: var(--mq-space-xl);
      color: var(--mq-color-text-primary);
    }
    
    .action-buttons {
      display: flex;
      gap: var(--mq-space-l);
      align-items: center;
      margin-bottom: var(--mq-space-2xl);
      flex-wrap: wrap;
    }
    
    .search-field {
      min-width: 250px;
    }
    
    .deals-section h2 {
      font-size: 20px;
      font-weight: 500;
      margin-bottom: var(--mq-space-s);
      color: var(--mq-color-text-primary);
    }
    
    .deals-note {
      color: var(--mq-color-text-tertiary);
      font-style: italic;
      margin-bottom: var(--mq-space-l);
    }
    
    .deal-row {
      cursor: pointer;
      transition: background-color 0.2s ease;
    }
    
    .deal-row:hover {
      background-color: var(--mq-color-grey-100);
    }
    
    .deal-cell {
      display: flex;
      flex-direction: column;
      gap: var(--mq-space-2xs);
    }
    
    .deal-name {
      color: var(--mq-color-text-brand);
      font-weight: 500;
    }
    
    .deal-subtitle {
      color: var(--mq-color-text-tertiary);
    }
  `]
})
export class DashboardComponent {
  readonly dealService = inject(DealService);

  // Signal for drawer state
  readonly isAddDealOpen = signal(false);

  openAddDeal(): void {
    this.isAddDealOpen.set(true);
  }

  onAddDealOpenChange(isOpen: boolean): void {
    this.isAddDealOpen.set(isOpen);
  }

  onDealAdded(deal: Deal): void {
    console.log('New deal added:', deal);
    // Deal automatically added to service via signals
  }

  onDealClick(deal: Deal): void {
    console.log('Deal clicked:', deal);
    // TODO: Navigate to deal details page
  }
}

// src/app/components/deals/deals.component.ts
import { Component, signal, inject } from '@angular/core';
import { CurrencyPipe, DatePipe } from '@angular/common';
import { Deal, DealService } from '../../services/deal.service';

@Component({
  selector: 'app-deals',
  imports: [CurrencyPipe, DatePipe],
  template: `
    <div class="deals-container">
      <h1>Loan Activities</h1>
      
      <!-- Activity Cards -->
      <div class="activity-cards">
        <div class="activity-card">
          <h3>Today</h3>
          <gel-text size="s" class="activity-text">
            No activities scheduled for today
          </gel-text>
        </div>
        
        <div class="activity-card">
          <h3>Tomorrow</h3>
          <gel-text size="s" class="activity-text">
            No activities scheduled for tomorrow
          </gel-text>
        </div>
        
        <div class="activity-card">
          <h3>Month End</h3>
          <gel-text size="s" class="activity-text">
            No month-end activities
          </gel-text>
        </div>
        
        <div class="activity-card">
          <h3>Overdue</h3>
          <gel-text size="s" class="activity-text">
            No overdue activities
          </gel-text>
        </div>
      </div>
      
      <!-- My Loans Section -->
      <div class="my-loans-section">
        <div class="section-header">
          <h2>My Loans</h2>
          <gel-text-input
            placeholder="Search"
            size="md"
            [(ngModel)]="searchTerm()"
            class="search-field">
          </gel-text-input>
        </div>
        
        <div class="loans-table-container">
          <gel-table size="md">
            <gel-table-row slot="header">
              <gel-table-header heading="Date"></gel-table-header>
              <gel-table-header heading="Status"></gel-table-header>
              <gel-table-header heading="Automated"></gel-table-header>
              <gel-table-header heading="Activity"></gel-table-header>
              <gel-table-header heading="Deal"></gel-table-header>
              <gel-table-header heading="Approver"></gel-table-header>
              <gel-table-header heading="Borrower"></gel-table-header>
              <gel-table-header heading="Facility"></gel-table-header>
              <gel-table-header heading="Loan Alias"></gel-table-header>
              <gel-table-header heading="CCY"></gel-table-header>
              <gel-table-header heading="Tran Amount"></gel-table-header>
              <gel-table-header heading="Host Bank"></gel-table-header>
              <gel-table-header heading="Agent"></gel-table-header>
            </gel-table-row>
            
            @for (deal of filteredDeals(); track deal.id) {
              <gel-table-row slot="body">
                <gel-table-cell>
                  <gel-text size="m">{{ deal.createdDate | date:'shortDate' }}</gel-text>
                </gel-table-cell>
                <gel-table-cell>
                  <gel-badge [label]="deal.status"></gel-badge>
                </gel-table-cell>
                <gel-table-cell>
                  <gel-text size="m">-</gel-text>
                </gel-table-cell>
                <gel-table-cell>
                  <gel-text size="m">-</gel-text>
                </gel-table-cell>
                <gel-table-cell>
                  <gel-text size="m" class="deal-link">{{ deal.name }}</gel-text>
                </gel-table-cell>
                <gel-table-cell>
                  <gel-text size="m">{{ deal.agent }}</gel-text>
                </gel-table-cell>
                <gel-table-cell>
                  <gel-text size="m">{{ deal.name }}</gel-text>
                </gel-table-cell>
                <gel-table-cell>
                  <gel-text size="m">{{ deal.facility }}</gel-text>
                </gel-table-cell>
                <gel-table-cell>
                  <gel-text size="m">{{ deal.shortNames }}</gel-text>
                </gel-table-cell>
                <gel-table-cell>
                  <gel-text size="m">USD</gel-text>
                </gel-table-cell>
                <gel-table-cell>
                  <gel-text size="m">{{ deal.facilityLimit | currency:'USD':'symbol':'1.0-0' }}</gel-text>
                </gel-table-cell>
                <gel-table-cell>
                  <gel-text size="m">{{ deal.agent }}</gel-text>
                </gel-table-cell>
                <gel-table-cell>
                  <gel-text size="m">{{ deal.agent }}</gel-text>
                </gel-table-cell>
              </gel-table-row>
            } @empty {
              <gel-table-row slot="body">
                <gel-table-cell colspan="13" class="no-data-cell">
                  <gel-text size="m" class="no-data-text">
                    No loan activities found
                  </gel-text>
                </gel-table-cell>
              </gel-table-row>
            }
          </gel-table>
        </div>
        
        <div class="pagination-info">
          <gel-text size="s" appearance="disabled">
            {{ dealService.dealCount() }} of {{ dealService.dealCount() }}
          </gel-text>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .deals-container {
      padding: var(--mq-space-xl);
      max-width: 100%;
    }
    
    h1 {
      font-size: 28px;
      font-weight: 400;
      margin-bottom: var(--mq-space-xl);
      color: var(--mq-color-text-primary);
    }
    
    .activity-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: var(--mq-space-l);
      margin-bottom: var(--mq-space-2xl);
    }
    
    .activity-card {
      background: var(--mq-color-primary-white);
      border-radius: var(--mq-border-radius-m);
      padding: var(--mq-space-xl);
      box-shadow: var(--mq-shadow-l1-0);
      min-height: 120px;
    }
    
    .activity-card h3 {
      margin: 0 0 var(--mq-space-m) 0;
      font-size: 16px;
      font-weight: 600;
      color: var(--mq-color-text-primary);
    }
    
    .activity-text {
      color: var(--mq-color-text-tertiary);
    }
    
    .my-loans-section {
      background: var(--mq-color-primary-white);
      border-radius: var(--mq-border-radius-m);
      box-shadow: var(--mq-shadow-l1-0);
    }
    
    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: var(--mq-space-l) var(--mq-space-xl);
      border-bottom: 1px solid var(--mq-color-grey-200);
    }
    
    .section-header h2 {
      margin: 0;
      font-size: 20px;
      font-weight: 500;
      color: var(--mq-color-text-primary);
    }
    
    .search-field {
      width: 300px;
    }
    
    .loans-table-container {
      min-height: 400px;
      overflow-x: auto;
    }
    
    .deal-link {
      color: var(--mq-color-text-brand);
      cursor: pointer;
    }
    
    .deal-link:hover {
      color: var(--mq-color-text-brand-hover);
      text-decoration: underline;
    }
    
    .no-data-cell {
      text-align: center;
      padding: var(--mq-space-2xl);
    }
    
    .no-data-text {
      color: var(--mq-color-text-tertiary);
      font-style: italic;
    }
    
    .pagination-info {
      padding: var(--mq-space-l) var(--mq-space-xl);
      text-align: right;
      border-top: 1px solid var(--mq-color-grey-200);
    }
  `]
})
export class DealsComponent {
  readonly dealService = inject(DealService);

  // Signal for search functionality
  readonly searchTerm = signal('');

  // Computed signal for filtered deals
  readonly filteredDeals = computed(() => {
    const deals = this.dealService.deals();
    const term = this.searchTerm().toLowerCase().trim();
    
    if (!term) return deals;
    
    return deals.filter(deal => 
      deal.name.toLowerCase().includes(term) ||
      deal.agent.toLowerCase().includes(term) ||
      deal.facility.toLowerCase().includes(term) ||
      deal.industry.toLowerCase().includes(term) ||
      deal.shortNames.toLowerCase().includes(term)
    );
  });
}

// src/app/components/add-deal-drawer/add-deal-drawer.component.ts
import { Component, signal, input, output, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatDialogModule, MatDialog } from '@angular/material/dialog';
import { Deal, Contact, DealService } from '../../services/deal.service';
import { ConfirmationDialogComponent } from '../confirmation-dialog/confirmation-dialog.component';

@Component({
  selector: 'app-add-deal-drawer',
  imports: [FormsModule, MatSidenavModule, MatDialogModule],
  template: `
    <mat-sidenav-container class="drawer-container">
      <mat-sidenav 
        #drawer
        position="end"
        mode="over"
        [opened]="isOpen()"
        [disableClose]="false"
        class="add-deal-drawer"
        (openedChange)="handleOpenedChange($event)">
        
        <div class="drawer-header">
          <h2>Add Deal UI</h2>
          <gel-button 
            hierarchy="secondary" 
            size="sm" 
            iconLeft="close"
            (click)="close()">
          </gel-button>
        </div>
        
        <div class="drawer-content">
          <gel-form name="deal-form" action="#" (ngSubmit)="onSubmit()" #dealForm="ngForm">
            
            <gel-form-item layout="vertical" label="Name">
              <gel-text-input
                name="name"
                [(ngModel)]="deal.name"
                required="true"
                placeholder="Enter deal name"
                [disabled]="isSubmitting()">
              </gel-text-input>
            </gel-form-item>
            
            <gel-form-item layout="vertical" label="Logo">
              <gel-text-input
                name="logo"
                [(ngModel)]="deal.logo"
                placeholder="ability to download picture for logo"
                [disabled]="isSubmitting()">
              </gel-text-input>
            </gel-form-item>
            
            <gel-form-item layout="vertical" label="Facility Limit ($)">
              <gel-text-input
                name="facilityLimit"
                inputType="number"
                [(ngModel)]="deal.facilityLimit"
                required="true"
                placeholder="Enter facility limit"
                [disabled]="isSubmitting()">
              </gel-text-input>
            </gel-form-item>
            
            <div class="form-row">
              <gel-form-item layout="vertical" label="Agent" class="agent-field">
                <gel-text-input
                  name="agent"
                  [(ngModel)]="deal.agent"
                  required="true"
                  placeholder="Enter agent"
                  [disabled]="isSubmitting()">
                </gel-text-input>
              </gel-form-item>
              
              <div class="prorate-section">
                <gel-text size="s" class="prorate-label">Prorate Share</gel-text>
                <gel-checkbox 
                  label="Manual or Input from LoanIQ?"
                  [(ngModel)]="prorateShare"
                  name="prorateShare">
                </gel-checkbox>
              </div>
            </div>
            
            <gel-form-item layout="vertical" label="Short Names">
              <gel-text-input
                name="shortNames"
                [(ngModel)]="deal.shortNames"
                required="true"
                placeholder="This is the unique ID that is used in LoanIQ"
                [disabled]="isSubmitting()">
              </gel-text-input>
            </gel-form-item>
            
            <gel-form-item layout="vertical" label="Facility">
              <gel-dropdown 
                [(ngModel)]="deal.facility"
                name="facility"
                label="Select facility type"
                [disabled]="isSubmitting()">
                <gel-dropdown-item id="Revolver" label="Revolver"></gel-dropdown-item>
                <gel-dropdown-item id="Term Loan" label="Term Loan"></gel-dropdown-item>
                <gel-dropdown-item id="Transactional" label="Transactional"></gel-dropdown-item>
              </gel-dropdown>
            </gel-form-item>
            
            <gel-form-item layout="vertical" label="Industry">
              <gel-dropdown 
                [(ngModel)]="deal.industry"
                name="industry"
                label="Select industry"
                [disabled]="isSubmitting()">
                <gel-dropdown-item id="Energy" label="Energy"></gel-dropdown-item>
                <gel-dropdown-item id="Metals" label="Metals"></gel-dropdown-item>
                <gel-dropdown-item id="Technology" label="Technology"></gel-dropdown-item>
                <gel-dropdown-item id="Healthcare" label="Healthcare"></gel-dropdown-item>
              </gel-dropdown>
            </gel-form-item>
            
            <gel-form-item layout="vertical" label="Type">
              <gel-dropdown 
                [(ngModel)]="deal.type"
                name="type"
                label="Select type"
                [disabled]="isSubmitting()">
                <gel-dropdown-item id="Syndication" label="Syndication"></gel-dropdown-item>
                <gel-dropdown-item id="Bilateral" label="Bilateral"></gel-dropdown-item>
                <gel-dropdown-item id="Club Deal" label="Club Deal"></gel-dropdown-item>
              </gel-dropdown>
            </gel-form-item>
            
            <gel-form-item layout="vertical" label="Status">
              <gel-dropdown 
                [(ngModel)]="deal.status"
                name="status"
                label="Select status"
                [disabled]="isSubmitting()">
                <gel-dropdown-item id="Lender" label="Lender"></gel-dropdown-item>
                <gel-dropdown-item id="Agent" label="Agent"></gel-dropdown-item>
                <gel-dropdown-item id="Participant" label="Participant"></gel-dropdown-item>
              </gel-dropdown>
            </gel-form-item>
            
            <div class="contacts-section">
              <h3>Contacts</h3>
              @for (contact of deal.contacts; track $index; let i = $index) {
                <div class="contact-row">
                  <gel-form-item layout="vertical" label="Name" class="contact-name">
                    <gel-text-input
                      [name]="'contactName' + i"
                      [(ngModel)]="contact.name"
                      [disabled]="isSubmitting()">
                    </gel-text-input>
                  </gel-form-item>
                  
                  <gel-form-item layout="vertical" label="Role" class="contact-role">
                    <gel-text-input
                      [name]="'contactRole' + i"
                      [(ngModel)]="contact.role"
                      [disabled]="isSubmitting()">
                    </gel-text-input>
                  </gel-form-item>
                  
                  @if (deal.contacts.length > 1) {
                    <gel-button 
                      hierarchy="secondary" 
                      size="sm" 
                      iconLeft="delete"
                      [disabled]="isSubmitting()"
                      (click)="removeContact(i)"
                      class="remove-contact-btn">
                    </gel-button>
                  }
                </div>
              }
              
              <gel-button 
                hierarchy="secondary" 
                size="sm" 
                iconLeft="add"
                [disabled]="isSubmitting()"
                (click)="addContact()"
                class="add-contact-btn">
                Add Contact
              </gel-button>
            </div>
            
            <gel-form-item layout="vertical" label="Company Description">
              <textarea 
                name="companyDescription"
                [(ngModel)]="deal.companyDescription"
                required
                rows="4"
                [disabled]="isSubmitting()"
                placeholder="Enter company description"
                class="company-description">
              </textarea>
            </gel-form-item>
            
            <div class="form-actions">
              <gel-button 
                hierarchy="primary"
                size="lg"
                [expand]="true"
                [disabled]="!dealForm.valid || isSubmitting()"
                type="submit">
                @if (!isSubmitting()) {
                  Submit
                } @else {
                  Submitting...
                }
              </gel-button>
            </div>
          </gel-form>
        </div>
      </mat-sidenav>
    </mat-sidenav-container>
  `,
  styles: [`
    :host {
      display: block;
      height: 100%;
    }
    
    .drawer-container {
      height: 100%;
    }
    
    mat-sidenav {
      width: 300px;
      border-radius: 0 !important;
    }
    
    .drawer-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: var(--mq-space-l) var(--mq-space-xl);
      border-bottom: 1px solid var(--mq-color-grey-200);
      background: var(--mq-color-primary-white);
      position: sticky;
      top: 0;
      z-index: 10;
    }
    
    .drawer-header h2 {
      margin: 0;
      font-size: 18px;
      font-weight: 600;
      color: var(--mq-color-text-primary);
    }
    
    .drawer-content {
      padding: var(--mq-space-xl);
      overflow-y: auto;
      height: calc(100% - 70px);
    }
    
    gel-form {
      display: flex;
      flex-direction: column;
      gap: var(--mq-space-l);
    }
    
    .form-row {
      display: flex;
      gap: var(--mq-space-l);
      align-items: flex-end;
    }
    
    .agent-field {
      flex: 2;
    }
    
    .prorate-section {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: var(--mq-space-xs);
    }
    
    .prorate-label {
      font-weight: 500;
      color: var(--mq-color-text-primary);
    }
    
    .contacts-section {
      margin: var(--mq-space-l) 0;
    }
    
    .contacts-section h3 {
      margin: 0 0 var(--mq-space-l) 0;
      font-size: 16px;
      font-weight: 600;
      color: var(--mq-color-text-primary);
    }
    
    .contact-row {
      display: flex;
      gap: var(--mq-space-s);
      align-items: flex-end;
      margin-bottom: var(--mq-space-l);
    }
    
    .contact-name {
      flex: 2;
    }
    
    .contact-role {
      flex: 1;
    }
    
    .remove-contact-btn {
      margin-bottom: var(--mq-space-l);
    }
    
    .add-contact-btn {
      margin-top: var(--mq-space-s);
    }
    
    .company-description {
      width: 100%;
      padding: var(--mq-space-s) var(--mq-space-m);
      border: 1px solid var(--mq-color-grey-300);
      border-radius: var(--mq-border-radius-s);
      font-family: inherit;
      font-size: 14px;
      color: var(--mq-color-text-primary);
      resize: vertical;
      min-height: 80px;
      background: var(--mq-color-primary-white);
    }
    
    .company-description:focus {
      outline: none;
      border-color: var(--mq-color-brand-500);
      box-shadow: 0 0 0 2px var(--mq-color-brand-100);
    }
    
    .company-description:disabled {
      background: var(--mq-color-grey-100);
      color: var(--mq-color-text-disabled);
      cursor: not-allowed;
    }
    
    .form-actions {
      margin-top: var(--mq-space-xl);
      padding-bottom: var(--mq-space-xl);
    }
  `]
})
export class AddDealDrawerComponent {
  private dealService = inject(DealService);
  private dialog = inject(MatDialog);

  // Modern input/output signals
  readonly isOpen = input<boolean>(false);
  readonly openChange = output<boolean>();
  readonly dealAdded = output<Deal>();

  // Component state signals
  readonly isSubmitting = signal(false);

  // Form data (no need for signals for simple form fields)
  deal: Deal = this.initializeDeal();
  prorateShare = false;

  initializeDeal(): Deal {
    return {
      name: '',
      logo: '',
      facilityLimit: 0,
      agent: '',
      shortNames: '',
      facility: '',
      industry: '',
      type: '',
      status: '',
      companyDescription: '',
      contacts: [{ name: '', role: '' }]
    };
  }

  handleOpenedChange(opened: boolean): void {
    if (!opened) {
      this.close();
    }
  }

  close(): void {
    this.openChange.emit(false);
    this.resetForm();
  }

  addContact(): void {
    this.deal.contacts.push({ name: '', role: '' });
  }

  removeContact(index: number): void {
    this.deal.contacts.splice(index, 1);
  }

  onSubmit(): void {
    const dialogRef = this.dialog.open(ConfirmationDialogComponent, {
      width: '400px',
      data: {
        title: 'Confirm Deal Creation',
        message: `Are you sure you want to create the deal "${this.deal.name}"?`,
        confirmText: 'Create Deal',
        cancelText: 'Cancel'
      }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.submitDeal();
      }
    });
  }

  private submitDeal(): void {
    this.isSubmitting.set(true);
    
    this.dealService.addDeal(this.deal).subscribe({
      next: (newDeal) => {
        this.isSubmitting.set(false);
        this.dealAdded.emit(newDeal);
        this.close();
      },
      error: (error) => {
        this.isSubmitting.set(false);
        console.error('Error creating deal:', error);
      }
    });
  }

  private resetForm(): void {
    this.deal = this.initializeDeal();
    this.prorateShare = false;
    this.isSubmitting.set(false);
  }
}

// src/app/components/confirmation-dialog/confirmation-dialog.component.ts
import { Component, inject, SIGNAL } from '@angular/core';
import { MatDialogModule, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';

export interface ConfirmationDialogData {
  title: string;
  message: string;
  confirmText: string;
  cancelText: string;
}

@Component({
  selector: 'app-confirmation-dialog',
  imports: [MatDialogModule],
  template: `
    <div class="dialog-container">
      <h2 mat-dialog-title class="dialog-title">{{ data.title }}</h2>
      
      <div mat-dialog-content class="dialog-content">
        <gel-text size="m">{{ data.message }}</gel-text>
      </div>
      
      <div mat-dialog-actions class="dialog-actions">
        <gel-button 
          hierarchy="secondary" 
          (click)="onCancel()">
          {{ data.cancelText }}
        </gel-button>
        
        <gel-button 
          hierarchy="primary" 
          (click)="onConfirm()">
          {{ data.confirmText }}
        </gel-button>
      </div>
    </div>
  `,
  styles: [`
    .dialog-container {
      padding: var(--mq-space-l);
    }
    
    .dialog-title {
      margin: 0 0 var(--mq-space-l) 0;
      font-size: 18px;
      font-weight: 600;
      color: var(--mq-color-text-primary);
    }
    
    .dialog-content {
      margin-bottom: var(--mq-space-xl);
      color: var(--mq-color-text-secondary);
    }
    
    .dialog-actions {
      display: flex;
      gap: var(--mq-space-m);
      justify-content: flex-end;
      margin: 0;
      padding: 0;
    }
  `]
})
export class ConfirmationDialogComponent {
  readonly dialogRef = inject(MatDialogRef<ConfirmationDialogComponent>);
  readonly data = inject<ConfirmationDialogData>(MAT_DIALOG_DATA);

  onCancel(): void {
    this.dialogRef.close(false);
  }

  onConfirm(): void {
    this.dialogRef.close(true);
  }
}

// src/styles.scss
/* Design System Styles - Using GEL Library Variables */
html, body { 
  height: 100%; 
  margin: 0; 
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
  background-color: var(--mq-color-grey-50);
}

* {
  box-sizing: border-box;
}

/* Fix for Material sidenav overlay */
.cdk-overlay-container {
  z-index: 1000;
}

.cdk-global-overlay-wrapper {
  z-index: 1000;
}

/* Material Dialog overrides */
.mat-mdc-dialog-container {
  --mdc-dialog-container-shape: var(--mq-border-radius-m);
  box-shadow: var(--mq-shadow-l4-0);
}

.mat-mdc-dialog-surface {
  border-radius: var(--mq-border-radius-m);
}

/* Hide Material button ripples for cleaner GEL appearance */
.mat-mdc-button .mat-mdc-button-ripple,
.mat-mdc-raised-button .mat-mdc-button-ripple {
  display: none;
}

/* Material Menu styling to match GEL theme */
.mat-mdc-menu-panel {
  border-radius: var(--mq-border-radius-s);
  box-shadow: var(--mq-shadow-l3-0);
}

/* Focus styles */
.mat-mdc-button:focus-visible,
.mat-mdc-raised-button:focus-visible {
  outline: 2px solid var(--mq-color-brand-500);
  outline-offset: 2px;
}

/* Sidenav styling */
.mat-drawer-backdrop.mat-drawer-shown {
  background-color: var(--mq-color-primary-black-25);
}

.mat-drawer {
  box-shadow: var(--mq-shadow-l4-0);
}

/* Form validation styles */
.ng-invalid.ng-touched {
  border-color: var(--mq-color-text-negative);
}

.ng-valid.ng-touched {
  border-color: var(--mq-color-text-positive);
}

/* Custom scrollbar for webkit browsers */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: var(--mq-color-grey-100);
}

::-webkit-scrollbar-thumb {
  background: var(--mq-color-grey-400);
  border-radius: var(--mq-border-radius-xs);
}

::-webkit-scrollbar-thumb:hover {
  background: var(--mq-color-grey-500);
}

